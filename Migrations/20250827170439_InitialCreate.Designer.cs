// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dtaplace.Models;

#nullable disable

namespace dtaplace.Migrations
{
    [DbContext(typeof(DTAPlaceDbContext))]
    [Migration("20250827170439_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RoomUser", b =>
                {
                    b.Property<int>("RoomsID")
                        .HasColumnType("int");

                    b.Property<int>("UsersID")
                        .HasColumnType("int");

                    b.HasKey("RoomsID", "UsersID");

                    b.HasIndex("UsersID");

                    b.ToTable("RoomUser");
                });

            modelBuilder.Entity("dtaplace.Models.GiftCard", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("PlanID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PlanID");

                    b.ToTable("GiftCards");
                });

            modelBuilder.Entity("dtaplace.Models.Invitation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ReceiverID")
                        .HasColumnType("int");

                    b.Property<int>("RoomID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ReceiverID");

                    b.HasIndex("RoomID");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("dtaplace.Models.Pixel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("B")
                        .HasColumnType("int");

                    b.Property<int>("G")
                        .HasColumnType("int");

                    b.Property<int>("R")
                        .HasColumnType("int");

                    b.Property<int>("RoomID")
                        .HasColumnType("int");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RoomID");

                    b.ToTable("Pixels");
                });

            modelBuilder.Entity("dtaplace.Models.Plan", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("MaxRoom")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Secs2Paint")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("dtaplace.Models.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Rolename")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("dtaplace.Models.Room", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("dtaplace.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlanID")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("PlanID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("dtaplace.Models.UserRoom", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<int>("RoomID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RoleID")
                        .IsUnique();

                    b.HasIndex("RoomID");

                    b.HasIndex("UserID");

                    b.ToTable("UserRooms");
                });

            modelBuilder.Entity("RoomUser", b =>
                {
                    b.HasOne("dtaplace.Models.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dtaplace.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("dtaplace.Models.GiftCard", b =>
                {
                    b.HasOne("dtaplace.Models.Plan", "Plan")
                        .WithMany("GiftCards")
                        .HasForeignKey("PlanID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("dtaplace.Models.Invitation", b =>
                {
                    b.HasOne("dtaplace.Models.User", "Receiver")
                        .WithMany("Invitations")
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("dtaplace.Models.Room", "Room")
                        .WithMany("Invitations")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("dtaplace.Models.Pixel", b =>
                {
                    b.HasOne("dtaplace.Models.Room", "Room")
                        .WithMany("Pixels")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("dtaplace.Models.User", b =>
                {
                    b.HasOne("dtaplace.Models.Plan", "Plan")
                        .WithMany("Users")
                        .HasForeignKey("PlanID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("dtaplace.Models.UserRoom", b =>
                {
                    b.HasOne("dtaplace.Models.Role", "Role")
                        .WithOne("UserRoom")
                        .HasForeignKey("dtaplace.Models.UserRoom", "RoleID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("dtaplace.Models.Room", "Room")
                        .WithMany("UserRooms")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("dtaplace.Models.User", "User")
                        .WithMany("UserRooms")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dtaplace.Models.Plan", b =>
                {
                    b.Navigation("GiftCards");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("dtaplace.Models.Role", b =>
                {
                    b.Navigation("UserRoom")
                        .IsRequired();
                });

            modelBuilder.Entity("dtaplace.Models.Room", b =>
                {
                    b.Navigation("Invitations");

                    b.Navigation("Pixels");

                    b.Navigation("UserRooms");
                });

            modelBuilder.Entity("dtaplace.Models.User", b =>
                {
                    b.Navigation("Invitations");

                    b.Navigation("UserRooms");
                });
#pragma warning restore 612, 618
        }
    }
}
